import random

def add_codon(sentence_length, exclude=[]):
    """
    Generate a sentence of codons.  A codon is a three base pair sequence. We can exclude specific
    codons from being generated by including a list of base pair triples to exclude.  The output
    of this function is a list of dna nucleotides"""
    dna_nucleotides = "ATCG"
    sequence = ""
    while len(sequence) < sentence_length:
        # There is likely a rule for order of base pairs.  We generate at random
        sequence += random.sample(dna_nucleotides,1)[0]
        # Disallow certain sequences to preserve the language structure
        if len(sequence)>=3 and sequence[-3:] in exclude:
            sequence = sequence[0:-3]
    return sequence

def generate_dna(sentence_count=10, codon_count=20):
    """
    Produce Random DNA Sequences.  This code generates a language sample for mRNA synthesis of
    amino acid chains.
    """
    sequence = ""
    start_seq = "ATG"
    stop_seq = ["TAA", "TAG", "TGA"]
    end_rna_seq = "AATAAA"
    
    for j in range(sentence_count):
        
        # encode start sequence
        sequence += start_seq
        
        # encode polpypeptide sequence. do not include end sequence
        count = codon_count if isinstance(codon_count, int) else codon_count(j)
        sequence += add_codon(count * 3, stop_seq)
        
        # encode end sequence - which one to use? We randomly select one
        sequence += random.choice(stop_seq)

        # mRNA Sequence End - How many to produce?
        sequence += end_rna_seq

    return sequence

def transcribe_dna_to_rna(sequence):
#     end_tag = "AAUAAA"
    # 5'END Cap - reversed Guanine (lower case g as substitute)
    rna = ""
    rna += sequence.replace("T","U")
#     if rna.endswith(end_tag):
#         rna += "A"*(random.randint(30,50))
    return rna

def print_wrap(p,offsets=True):
    ofs = 0
    linelen = 70
    while ofs < len(p):
        end = min(linelen, len(p)-ofs)
        if offsets:
            print(f"{(ofs+1):5} : ",end="")
        print(f"{p[ofs:ofs+end]}", end="\n" if not offsets else "")
        if offsets:
            print(" "*(linelen-end)+f" : {ofs+end:<5}")
        ofs += end

def translate_rna(rna):
    
    def get_start(rna, end=0):
        try:
            i = rna.index("AUG", end)
            if i != end:
                print("SKIPPED NUCLEOTIDES:", end+1, "to", i)
                print_wrap(rna[end:i])
        except ValueError:
            i = len(rna)
        return i

    codon_to_amino_acid = [
        amino_acid("Phe"),amino_acid("Phe"),amino_acid("Leu"),amino_acid("Leu"),
        amino_acid("Ser"),amino_acid("Ser"),amino_acid("Ser"),amino_acid("Ser"),
        amino_acid("Tyr"),amino_acid("Tyr"),'x',              'x',
        amino_acid("Cys"),amino_acid("Cys"),'x',              amino_acid("Trp"),
        amino_acid("Leu"),amino_acid("Leu"),amino_acid("Leu"),amino_acid("Leu"),
        amino_acid("Pro"),amino_acid("Pro"),amino_acid("Pro"),amino_acid("Pro"),
        amino_acid("His"),amino_acid("His"),amino_acid("Gln"),amino_acid("Gln"),
        amino_acid("Arg"),amino_acid("Arg"),amino_acid("Arg"),amino_acid("Arg"),
        amino_acid("Ile"),amino_acid("Ile"),amino_acid("Ile"),amino_acid("Met"),
        amino_acid("Thr"),amino_acid("Thr"),amino_acid("Thr"),amino_acid("Thr"),
        amino_acid("Asn"),amino_acid("Asn"),amino_acid("Lys"),amino_acid("Lys"),
        amino_acid("Arg"),amino_acid("Arg"),amino_acid("Arg"),amino_acid("Arg"),
        amino_acid("Val"),amino_acid("Val"),amino_acid("Val"),amino_acid("Val"),
        amino_acid("Ala"),amino_acid("Ala"),amino_acid("Ala"),amino_acid("Ala"),
        amino_acid("Asp"),amino_acid("Asp"),amino_acid("Glu"),amino_acid("Glu"),
        amino_acid("Gly"),amino_acid("Gly"),amino_acid("Gly"),amino_acid("Gly")
    ]
    residues = "".join(r for r in codon_to_amino_acid)#codon_to_amino_acid[i] for i in range(64))
    peptides = []
    pp = ""
    i = get_start(rna)

    while i + 3 <= len(rna):
        codon = 0
        for nt in rna[i:i+3]:
            codon = (codon << 2) | "UCAG".index(nt)
        pp += residues[codon]
        i += 3
        if pp[-1] == "x":
            peptides.append(pp[:-1])
            pp = ""
            i = get_start(rna, i)

    if pp:
        print("PEPTIDE SEQUENCE W/O END CODON",rna[i:])
        peptides.append(pp)
    return peptides

def openFasta(filename):
    seq = dict()
    with open(filename) as f:
        curr = ""
        for line in f.readlines():
            line = line.strip()
            if line.startswith(">"):
                curr = line
                seq[curr] = ""
                continue
            seq[curr] += line
    return seq

def amino_acid(residue):
    codes = {
        "Ala":"A","Cys":"C","Asp":"D","Glu":"E",
        "Phe":"F","Gly":"G","His":"H","Ile":"I",
        "Lys":"K","Leu":"L","Met":"M","Asn":"N",
        "Pro":"P","Gln":"Q","Arg":"R","Ser":"S",
        "Thr":"T","Val":"V","Trp":"W","Tyr":"Y",
        "A":"Ala","C":"Cys","D":"Asp","E":"Glu",
        "F":"Phe","G":"Gly","H":"His","I":"Ile",
        "K":"Lys","L":"Leu","M":"Met","N":"Asn",
        "P":"Pro","Q":"Gln","R":"Arg","S":"Ser",
        "T":"Thr","V":"Val","W":"Trp","Y":"Tyr",
    }
    return codes[residue]